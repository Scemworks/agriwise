generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  name                String?
  passwordHash        String
  phone               String?
  // Location details
  state               String?
  city                String?
  pincode             String?
  address             String?
  latitude            Float?
  longitude           Float?
  // User preferences
  language            String               @default("en")
  timezone            String               @default("Asia/Kolkata")
  // Profile
  avatar              String?
  bio                 String?
  isVerified          Boolean              @default(false)
  isActive            Boolean              @default(true)
  lastLoginAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  // relation back to RefreshToken
  refreshTokens       RefreshToken[]
  // marketplace relations
  products            Product[]
  reviews             Review[]
  bids                Bid[]
  // additional relations
  farms               Farm[]
  carbonCredits       CarbonCredit[]
  chatMessages        ChatMessage[]
  activities          Activity[]
  // AI recommendations
  cropRecommendations CropRecommendation[]
  // Weather preferences
  weatherPreferences  WeatherPreference[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  tokenHash String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Marketplace models
model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  condition   String?
  price       Float?
  quantity    Int            @default(1)
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      ProductImage[]
  listings    Listing[]
  reviews     Review[]
  seller      User?          @relation(fields: [sellerId], references: [id])
  sellerId    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Listing {
  id          String    @id @default(uuid())
  type        String // 'auction' | 'sale'
  startingBid Float?
  buyNowPrice Float?
  endsAt      DateTime?
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  active      Boolean   @default(true)
  bids        Bid[]
  createdAt   DateTime  @default(now())
}

model Bid {
  id        String   @id @default(uuid())
  amount    Float
  bidder    User     @relation(fields: [bidderId], references: [id])
  bidderId  String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())
}

model WeatherRecord {
  id          String   @id @default(uuid())
  farm        Farm     @relation(fields: [farmId], references: [id])
  farmId      String
  recordedAt  DateTime
  temperature Float?
  humidity    Float?
  rainfall    Float?
  windSpeed   Float?
  condition   String?
  createdAt   DateTime @default(now())
}

enum CarbonCreditStatus {
  active
  pending
  sold
}

model CarbonCredit {
  id          String             @id @default(uuid())
  practice    String
  credits     Int
  value       Float
  status      CarbonCreditStatus @default(active)
  date        DateTime
  description String?
  owner       User?              @relation(fields: [ownerId], references: [id])
  ownerId     String?
  farm        Farm?              @relation(fields: [farmId], references: [id])
  farmId      String?
  createdAt   DateTime           @default(now())
}

enum MessageSender {
  USER
  BOT
}

model ChatMessage {
  id        String        @id @default(uuid())
  sender    MessageSender
  text      String
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  timestamp DateTime
}

model Activity {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  action String
  time   DateTime @default(now())
}

// AI Crop Recommendations
model CropRecommendation {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  crop              String
  variety           String?
  confidence        Float
  reasons           String[] // Array of reasons
  plantingTime      String?
  harvestTime       String?
  expectedYield     String?
  waterRequirements String?
  fertilizerNeeds   String?
  pestRisks         String[]
  marketPrice       Float?
  profitPotential   String?
  // Input data used for recommendation
  soilData          Json? // Store soil analysis data
  weatherData       Json? // Store weather data
  farmData          Json? // Store farm data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Weather Preferences
model WeatherPreference {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  location      String // City/State
  latitude      Float?
  longitude     Float?
  isDefault     Boolean  @default(false)
  alerts        Boolean  @default(true) // Weather alerts enabled
  notifications Boolean  @default(true) // Push notifications
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Indian States and Cities
model State {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String   @unique // State code like "KA", "TN"
  cities    City[]
  createdAt DateTime @default(now())
}

model City {
  id        String   @id @default(uuid())
  name      String
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  pincode   String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())

  @@unique([name, stateId])
}

// Enhanced Farm model
model Farm {
  id            String          @id @default(uuid())
  name          String
  location      String
  state         String?
  city          String?
  pincode       String?
  latitude      Float?
  longitude     Float?
  soilType      String?
  landSize      Float? // acres
  currentCrops  String? // comma-separated list for simplicity
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       String
  weather       WeatherRecord[]
  carbonCredits CarbonCredit[]
  // Enhanced farm details
  irrigation    Boolean         @default(false)
  soilPh        Float?
  organicMatter Float?
  elevation     Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
